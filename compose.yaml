# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:
  app:
    build:
      context: .
    container_name: next-app
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    ports:
      - "3000:3000"
    depends_on:
      - db # Mettre en paranthèses si on veut travailler avec la base de données Supabase de production
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY=${NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - .:/app # Monte le code local dans le conteneur pour le développement
    command: ["pnpm", "dev"]

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  #   db:
  #     image: postgres
  #     restart: always
  #     user: postgres
  #     secrets:
  #       - db-password
  #     volumes:
  #       - db-data:/var/lib/postgresql/data
  #     environment:
  #       - POSTGRES_DB=example
  #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  # Service pour la base de données PostgreSQL
  db:
    image: postgres:15-alpine # Version légère de PostgreSQL
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432" # Expose PostgreSQL sur le port 5432
    volumes:
      - db-data:/var/lib/postgresql/data # Persiste les données même si le conteneur redémarre
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Virg024&
      POSTGRES_DB: postgres
volumes:
  db-data:
  #     expose:
  #       - 5432
  #     healthcheck:
  #       test: [ "CMD", "pg_isready" ]
  #       interval: 10s
  #       timeout: 5s
  #       retries: 5
  # volumes:
  #   db-data:
  # secrets:
  #   db-password:
  #     file: db/password.txt
